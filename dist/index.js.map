{"mappings":"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","sources":["src/index.ts","src/decorators/index.ts","src/decorators/attributeState.ts","src/decorators/state.ts","src/decorators/effect.ts","src/models/effects.ts","src/directives/index.ts","src/directives/assyncAppend.ts","src/directives/ref.ts","src/directives/state.ts","src/directives/style.ts","src/directives/until.ts","src/utils/index.ts","src/utils/observable-object/index.ts","src/utils/observable-object/models.ts","src/utils/observable-array/index.ts","src/webComponent/index.ts","src/webComponent/model.ts","src/controllers/bindEffect.ts","src/controllers/bindState.ts","src/controllers/bindConsumable.ts","src/templateComponent/index.ts","src/templateComponent/model.ts","src/templateComponent/types.ts","src/templateComponent/interfaces.ts","src/functions/index.ts","src/functions/render.ts"],"sourcesContent":["// export * from './dom';\nexport * from './decorators';\nexport * from './directives';\nexport * from './utils';\nexport * from './webComponent';\nexport * from './templateComponent';\n\nexport * from './functions';\n\nexport { Effects } from './models/effects';","export * from './attributeState';\nexport * from './state';\nexport * from './effect';","import { DecoratorAttributeConfiguration, attr } from \"@microsoft/fast-element\";\nimport { state } from './state';\n\n/**\n * @AttributeState decorator\n * A decorator to define a property as both an attribute and a state on a WebComponent.\n * This combines the behavior of @attr and @State decorators.\n * \n * @param {DecoratorAttributeConfiguration} options - Options to configure the attribute.\n * @returns {Function} - The decorator function.\n * \n * @example\n * ```typescript\n * // Define an editable title component using the AttributeState decorator\n * \n * customElement({\n *     name: 'editable-title',\n *     template : html`...`\n * })\n * class EditableTitle extends WebComponent {\n *     AttributeState() level: number = 2;\n *     AttributeState() editable: string = \"false\";\n *     State value: string = \"Hello World\";\n * \n *     handleInput(event) {\n *         this.value = event.target.innerText;\n *     }\n * \n *     connectedCallback() {\n *         super.connectedCallback();\n *     }\n * }\n * ```\n */\nexport function attrState( options:DecoratorAttributeConfiguration = {} ){\n\n  return ( target, propertyKey: string ) => {\n    attr( options )( target , propertyKey );\n    state()( target , propertyKey );\n  }\n\n}\n\nexport { attr };","import { Observable, observable } from \"@microsoft/fast-element\";\nimport { ViewExecutionContext } from \"../templateComponent/model\";\nimport { WebComponent } from \"../webComponent/model\";\nimport { ObservableObject, ObservableProxy } from \"../utils\";\n\ntype _WebComponent = (typeof WebComponent & { $states : ObservableProxy< any , any > });\ntype _ViewExecutionContext = (typeof ViewExecutionContext & { $states : ObservableProxy< any , any > });\n\n// function generateUniqueKey(length = 6) {\n//   // Génère une chaîne de chiffres aléatoires de la longueur spécifiée\n//   return Math.random().toString().slice(2, 2 + length);\n// }\n\n// /** \n//  * This est l'instance ( dernier layer du WebComponent , donc le WebComponentCustom )\n//  * Target est le layer WebComponent ( proto du WebComponentCustom extends WebComponent ) \n// */\n// const initializeState = function (\n//   instance: _WebComponent | _ViewExecutionContext,\n//   propertyKey: string,\n//   value: any\n// ) {\n//   // Vérifier si l'instance possède déjà ses propres états\n//   if (!instance.$states) {\n\n//     // Initialiser un nouvel objet observable spécifique à l'instance\n//     instance.$states = ObservableObject.init<any, any>({});\n    \n//     // Définir la propriété 'states' sur l'instance, pas sur le prototype\n//     Object.defineProperty(instance, 'states', {\n//       get: () => {\n//         return instance.$states;\n//       },\n//     });\n\n//   }\n\n//   const uniqueKey = `${propertyKey}_${generateUniqueKey(6)}`;\n\n//   // Initialiser la propriété d'état dans $states si elle n'existe pas encore\n\n//   // Rendre l'état observable sur l'objet de l'instance ($states)\n//   // observable(instance.$states, uniqueKey);\n\n//   // Ajouter la propriété observable sur l'instance\n//   Object.defineProperty(instance, propertyKey, {\n//     get: function () {\n//       return instance.$states[uniqueKey];\n//     },\n//     set: function (newValue) {\n//       console.log({[`set ${uniqueKey}`] : newValue})\n//       instance.$states[uniqueKey] = newValue;\n//     },\n//     enumerable: true,\n//     configurable: true,\n//   });\n\n//   // observable( instance , propertyKey )\n\n//   if (value) {\n//     instance[propertyKey] = value;\n//   }\n\n// };\n\n// /**\n//  * @state decorator\n//  * Définit une propriété d'état observable sur une instance de WebComponent ou ViewExecutionContext.\n//  * \n//  * @param {Object} target - La cible (prototype ou instance) sur laquelle le décorateur est appliqué.\n//  * @param {string} propertyKey - Le nom de la propriété d'état.\n//  * \n//  */\n// export function state(target: any, propertyKey: string, value: any = null , x?) {\n//   // Stocker le connectedCallback original si le décorateur est appliqué sur une classe\n//   const originalConnectedCallback = target.connectedCallback || function () {};\n\n//   // Si le décorateur est appliqué sur une classe (prototype)\n//   if (typeof target === 'function') {\n//     // Ajouter un hook dans le constructeur pour garantir l'initialisation de l'état\n//     const originalConstructor = target.prototype.constructor;\n//     target.prototype.constructor = function (...args: any[]) {\n\n//       // Appeler le constructeur original\n//       originalConstructor.apply(this, args);\n\n//       // Initialiser l'état pour cette instance\n//       initializeState(this, propertyKey, value);\n//     };\n//   } else {\n//     // Si le décorateur est appliqué directement sur une instance\n//     initializeState(target, propertyKey, value);\n//   }\n\n//   // Assurez-vous que le connectedCallback est exécuté correctement après l'initialisation des états\n//   target.connectedCallback = function () {\n//     // Initialiser l'état à la création de l'instance (si ce n'est pas déjà fait)\n//     initializeState(this, propertyKey, value);\n    \n//     // Appeler le connectedCallback original si nécessaire\n//     originalConnectedCallback.call(this);\n//   };\n// }\n\nexport function state(  ) {\n  return function (target: any, propertyName: string , value?:any , y?) {\n      let privateName = `_${propertyName}`\n\n      if(!target[propertyName])Object.defineProperty(target, propertyName, {\n          get() {\n              // Retourne la valeur de l'état depuis l'objet 'states' pour CETTE instance\n              if (!this.states) {\n                  this.states = {};  // Si l'objet 'states' n'existe pas encore, on le crée pour chaque instance\n              }\n\n              Observable.track(this, propertyName);\n\n              return this.states[privateName];\n          },\n          set(newValue: any) {\n              // Si l'objet 'states' n'existe pas encore, le créer pour CETTE instance\n              if (!this.states) {\n                  this.states = {};\n              }\n\n              const oldValue = this.states[privateName];\n\n              if(oldValue != newValue){\n\n                this.states[privateName] = newValue;\n\n                Observable.notify( this, propertyName);\n\n                // Si l'état a changé, déclenche une action pour CETTE instance\n                if (oldValue !== newValue) {\n                    this.handleStateChange(propertyName, oldValue, newValue);\n                }\n\n              }\n\n          },\n          enumerable: true,\n          configurable: true\n      });\n\n      if( value && target[propertyName] == null )target[ propertyName ] = value;\n\n  };\n}","import { ObservableObject, ObservableProxy } from \"src/utils\";\nimport { ViewExecutionContext } from \"../templateComponent\";\nimport { WebComponent } from \"../webComponent/model\";\nimport { Effects } from \"../models/effects\";\nimport { IWebComponent } from \"src/webComponent/interface\";\n\n// type _WebComponent = (typeof WebComponent & { $effects : Effects } & IWebComponent);\n// type _ViewExecutionContext = (typeof ViewExecutionContext & { $effects : Effects } & IWebComponent);\n\n// const initializeEffect = function ( this : _WebComponent | _ViewExecutionContext , target : _WebComponent | _ViewExecutionContext , propertyKey:string , dependencies:string[] , value:any ){\n\n//   if (!this.$effects) {\n//     this.$effects = Effects();\n\n//     Object.defineProperty( target , 'effects' , {\n//       get : () => {\n//         return this.$effects;\n//       }\n//     })\n\n//   }\n\n//   // Initialisation de la propriété d'état dans $states si elle n'existe pas\n//   if (!(propertyKey in this.$effects)) {\n//     this.$effects.set( propertyKey , value );\n//   }\n\n//   Object.defineProperty( target , propertyKey , {\n//     get(){\n//       return target.effects.get( propertyKey );\n//     },\n//     set(newValue){\n\n//       target.effects.set( propertyKey , {\n//         name : propertyKey,\n//         dependencies : dependencies,\n//         callback : newValue\n//       });\n\n//       return true;\n//     },\n//     enumerable: true,\n//     configurable: true\n//   });\n\n// }\n\n// export function effect( dependencies:any[] ){\n\n//   return ( target:IWebComponent , propertyKey: string , value = null ) => {\n\n//     const isWebComponent = target instanceof WebComponent;\n//     const isViewExecutionContext = target instanceof ViewExecutionContext;\n\n//     // Si le décorateur est appliqué directement sur une instance\n//     if (isWebComponent || isViewExecutionContext) {\n\n//       initializeEffect.call( target , target , propertyKey , dependencies , value );\n\n//     } else {\n\n//       // Si le décorateur est appliqué sur le prototype (classe)\n//       const originalConnectedCallback:any = target[\"connectedCallback\"] || function () {};\n\n//       (target as any).connectedCallback = function () {\n\n//         // Initialise l'état à la création de l'instance\n//         initializeEffect.call(this , target , propertyKey , dependencies , value);\n//         // Appelle la méthode originale connectedCallback si elle existe\n//         originalConnectedCallback.call(this , target , propertyKey , dependencies , value);\n\n//       };\n//     }\n\n//     // if( target instanceof WebComponent ){\n\n//     //   if('$effects' in target == false)(target as any).$effects = new Effects().bind( target );\n\n//     //   Object.defineProperty( target , propertyKey , {\n//     //     get(){\n//     //       return target[\"$effects\"]?.get( propertyKey );\n//     //     },\n//     //     set(newValue){\n\n//     //       target[\"$effects\"].set( propertyKey , {\n//     //         name : propertyKey,\n//     //         dependencies : dependencies as any,\n//     //         callback : newValue\n//     //       });\n          \n//     //       return true;\n//     //     },\n//     //     enumerable: true,\n//     //     configurable: true\n//     //   });\n\n//     // }\n\n//     // if( target instanceof ViewExecutionContext ){\n\n//     //   if('$effects' in target == false)(target as any).$effects = new Effects().bind( target );\n\n//     //   if(!target[propertyKey])Object.defineProperty( target , propertyKey , {\n//     //     get(){\n//     //       return target.effects.get( propertyKey );\n//     //     },\n//     //     set(newValue){\n  \n//     //       target.effects.set( propertyKey , {\n//     //         name : propertyKey,\n//     //         dependencies : dependencies as any,\n//     //         callback : newValue\n//     //       });\n  \n//     //       return true;\n//     //     },\n//     //     enumerable: true,\n//     //     configurable: true\n//     //   });\n  \n//     //   if( value )target[ propertyKey ] = value;\n\n//     // }\n  \n//   }\n\n// }\n\nexport function effect( dependencies:any[] ){\n\n  return ( target:IWebComponent , propertyName: string , value = null ) => {\n\n    if( !target[propertyName] )Object.defineProperty(target, propertyName, {\n      get() {\n          // Retourne la valeur de l'état depuis l'objet 'states' pour CETTE instance\n          if (!this.effects) {\n              this.effects = Effects();  // Si l'objet 'states' n'existe pas encore, on le crée pour chaque instance\n          }\n\n          return this.effects.get( propertyName );\n      },\n      set(newValue: any) {\n          // Si l'objet 'states' n'existe pas encore, le créer pour CETTE instance\n          if (!this.effects) {\n            this.effects = Effects();\n          }\n\n          this.effects.set( propertyName , {\n            name : propertyName,\n            dependencies : dependencies,\n            callback : newValue\n          } )\n\n      },\n      enumerable: true,\n      configurable: true\n    });\n    \n    if( value && target[propertyName] == null )target[ propertyName ] = value;\n  \n  }\n\n}","import { WebComponent } from \"../webComponent\";\nimport { ViewExecutionContext } from \"../templateComponent\";\nimport { IWebComponent } from \"src/webComponent/interface\";\n\nexport type EffectRegistery = ( Map< string , IEffect > & { execute( dependency?:string ):void } );\n\nexport interface IEffect{\n  name:string;\n  dependencies : string[];\n  callback:any;\n}\n\nexport function Effects( effects?:Record< string , IEffect > ):EffectRegistery{\n\n  const effects_register = new Map() as EffectRegistery;\n\n  if(effects)Object.values(effects).forEach((effect) => {\n    this.set( effect.name , effect )\n  });\n\n  effects_register.execute = function( dependency?:string ){\n\n    let effects_without_depedencies = [...this.values()].filter(( effect ) => !effect.dependencies || effect.dependencies.length == 0 ? effect : null);\n    let effects_with_depedencies = [...this.values()].filter(( effect ) => effect.dependencies && effect.dependencies.length > 0 ? effect : null);\n\n    effects_with_depedencies.forEach(( effect ) => {\n\n      let { dependencies , callback:useEffect , name } = effect;\n\n      if(dependency && dependencies.includes( dependency )){\n        console.log( `Math effect ${dependency}` )\n        useEffect();\n      }\n\n    })\n\n    if( !dependency )effects_without_depedencies.forEach(( effect ) => {\n\n      let { callback:useEffect } = effect;\n      try{\n        useEffect();\n      }\n      catch(error){\n        console.error(error);\n      }\n\n    })\n\n  }\n\n  return effects_register;\n\n}\n\n// export class Effects extends Map< string , IEffect >{\n\n//   execute( dependency?:string ){\n\n//     let effects_without_depedencies = [...this.values()].filter(( effect ) => !effect.dependencies || effect.dependencies.length == 0 ? effect : null);\n//     let effects_with_depedencies = [...this.values()].filter(( effect ) => effect.dependencies && effect.dependencies.length > 0 ? effect : null);\n\n//     effects_with_depedencies.forEach(( effect ) => {\n\n//       let { dependencies , callback:useEffect , name } = effect;\n\n//       if(dependency && dependencies.includes( dependency )){\n//         useEffect();\n//       }\n\n//     })\n\n//     if( !dependency )effects_without_depedencies.forEach(( effect ) => {\n\n//       let { callback:useEffect } = effect;\n//       try{\n//         useEffect();\n//       }\n//       catch(error){\n//         console.error(error);\n//       }\n\n//     })\n\n//   }\n\n//   constructor( effects?:Record< string , IEffect > ){\n//     super();\n\n//     if(effects)Object.values(effects).forEach((effect) => {\n//       this.set( effect.name , effect )\n//     });\n\n//   }\n\n// }","import {\n  when,\n  repeat,\n  // ref,\n  children,\n  elements,\n  slotted,\n} from '@microsoft/fast-element';\n\nexport {\n  when,\n  repeat,\n  children,\n  elements,\n  slotted\n}\n\nexport * from './assyncAppend.js';\nexport * from './ref.js';\nexport * from './state.js';\nexport * from './style.js';\nexport * from './until.js';","import { ViewTemplate, HTMLDirective , HTMLBindingDirective, HTMLView , html , Binding } from '@microsoft/fast-element';\nimport type { Subscriber , BindingDirective, ExpressionObserver } from '@microsoft/fast-element';\n\nexport class AsyncAppendBindig extends Binding{\n\n  createObserver(subscriber: Subscriber, directive: BindingDirective): ExpressionObserver<any, any, any> {\n\n    console.log({ subscriber , directive })\n\n    return {\n      bind(controller){\n        console.log({ controller })\n      }\n    }\n\n  }\n  \n}\n\nexport class AsyncAppendDirective<T = any> extends HTMLBindingDirective {\n\n  fn:Promise<T> = null;\n  callback:( result:T ) => ViewTemplate = null;\n\n  constructor( fn:Promise<T> , callback:( result:T ) => ViewTemplate ) {\n    super( new AsyncAppendBindig( (x) => null ) );\n    Object.assign( this , { fn , callback } );\n  }\n\n  createBehavior():any {\n\n    let { targetNodeId } = this;\n\n    return {\n        bind : (source:HTMLView ) => {\n\n          let target = source.targets[targetNodeId];\n\n          this.fn\n          .then(( result ) => {\n            this.callback( result ).render( source , target instanceof HTMLElement ? target : target.parentElement );\n          })\n          .catch(( error ) => {\n            console.error(error)\n            html`<span>Error: ${error}</span>`.render( source , target instanceof HTMLElement ? target : target.parentElement );\n          })\n\n        },\n        unbind : () => {\n            // Nettoyage si nécessaire\n        }\n    };\n\n  }\n\n  static use<T>( fn:Promise<T> , callback:( result:T ) => ViewTemplate ){\n    return new AsyncAppendDirective( fn , callback);\n  }\n\n}\n\nHTMLDirective.define( AsyncAppendDirective );\n\nexport { Subscriber }\n\nexport const asyncAppend = <T = any>( fn:Promise<T> , callback:( result:T ) => ViewTemplate ) => AsyncAppendDirective.use<T>( fn , callback );","import { HTMLDirective, HTMLView, Binding, BindingDirective, ExpressionObserver, Subscriber, StatelessAttachedAttributeDirective } from '@microsoft/fast-element';\n\nexport interface IElementRef< T extends Node >{\n  value : T;\n}\n\nexport function createRef< T extends Node >():IElementRef<T>{\n  return {\n    value : null\n  }\n}\n\nexport class RefDirective<T extends Node> extends StatelessAttachedAttributeDirective<IElementRef<T>> {\n\n  options:IElementRef<T> = null;\n\n  constructor( options:IElementRef<T> ) {\n    super( options );\n    Object.assign( this , { options } )\n  }\n\n  bind(controller: HTMLView): void {\n\n    let { lastChild:target } = controller;\n\n    this.options.value = target as any;\n\n  }\n\n  static use<T extends Node>( options:IElementRef<T> ){\n    return new RefDirective<T>( options );\n  }\n\n}\n\nHTMLDirective.define( RefDirective )\n\nexport const ref = <T extends Node>( options:IElementRef<T> ) => RefDirective.use<T>( options );","// import { ViewTemplate, HTMLBindingDirective, ExecutionContext } from '@microsoft/fast-element';\nimport { State , createState } from '@lithium-framework/state';\nimport { ViewTemplate, HTMLDirective , HTMLBindingDirective, HTMLView , Binding, BindingDirective, ExpressionObserver, Subscriber } from '@microsoft/fast-element';\n\nexport class StateBindig extends Binding{\n\n  createObserver(subscriber: Subscriber, directive: BindingDirective): ExpressionObserver<any, any, any> {\n\n    console.log({ subscriber , directive })\n\n    return {\n      bind(controller){\n        console.log({ controller })\n      }\n    }\n\n  }\n  \n}\n\nexport class StateDirective<T = any> extends HTMLBindingDirective {\n\n    _state:State<T> = null;\n    get state(){ return this._state.mutator[0] }\n    set state( value:T ){ this._state.mutator[1](value) }\n\n    _callback:( newValue:T ) => ViewTemplate = null;\n\n    constructor( state: State<T> , callback:( newValue:T ) => ViewTemplate ) {\n        super( new StateBindig( (x) => null ) );\n        this._state = state;\n        this._callback = callback;\n    }\n\n  createBehavior():any {\n\n    let { targetNodeId } = this;\n    let view:HTMLView = null;\n\n    return {\n        bind : (source:HTMLView) => {\n\n            let target = source.targets[targetNodeId];\n\n            if(this._callback){\n\n                this._state.subscribe(() => {\n                    view.dispose();\n                    view = this._callback( this.state ).render( source , target.parentElement );\n                });\n\n                view = this._callback( this.state ).render( source , target.parentElement );\n\n            }\n\n            else{\n\n                this._state.subscribe(() => {\n                    if(\"textContent\" in target){\n                        target.textContent = `${this.state}`;\n                    }\n                });\n\n                if(\"textContent\" in target){\n                    target.textContent = `${this.state}`;\n                }\n\n            }\n\n        },\n        unbind : () => {\n            // Nettoyage si nécessaire\n        }\n    };\n\n  }\n\n  static use<T = any>( state , callback ){\n    return new StateDirective<T>( state , callback )\n  }\n\n}\n\nHTMLDirective.define( StateDirective )\n\nexport const useState = <T>( state: State<T> , callback?:( newValue:T ) => ViewTemplate ) => StateDirective.use<T>( state , callback );","import { HTMLDirective, HTMLBindingDirective, HTMLView , Binding, BindingDirective, ExpressionObserver, Subscriber } from '@microsoft/fast-element';\nimport { Properties } from '../utils/css-object';\n\nexport class StyleBindig extends Binding{\n\n  createObserver(subscriber: Subscriber, directive: BindingDirective): ExpressionObserver<any, any, any> {\n\n    console.log({ subscriber , directive })\n\n    return {\n      bind(controller){\n        console.log({ controller })\n      }\n    }\n\n  }\n  \n}\n\nexport class StyleDirective extends HTMLBindingDirective {\n\n  css:Properties = null;\n\n  constructor( css:Properties ) {\n      super( new StyleBindig( (x) => null ) );\n      Object.assign( this , { css } );\n\n  }\n\ncreateBehavior():any {\n\n  let { targetNodeId } = this;\n  let view:HTMLView = null;\n\n  return {\n      bind : (source:HTMLView) => {\n\n        let target = source.targets[targetNodeId];\n        if(target instanceof HTMLElement)Object.assign( target.style , this.css );\n\n      },\n      unbind : () => {\n          // Nettoyage si nécessaire\n      }\n  };\n\n}\n\nstatic use( css:Properties ){\n  return new StyleDirective( css )\n}\n\n}\n\nHTMLDirective.define( StyleDirective );\n\nexport const style = ( css:Properties ) => StyleDirective.use( css );","import { ViewTemplate , html , HTMLDirective, HTMLBindingDirective, HTMLView , Binding, BindingDirective, ExpressionObserver, Subscriber } from '@microsoft/fast-element';\n\nexport class UntilBindig extends Binding{\n\n  createObserver(subscriber: Subscriber, directive: BindingDirective): ExpressionObserver<any, any, any> {\n\n    console.log({ subscriber , directive })\n\n    return {\n      bind(controller){\n        console.log({ controller })\n      }\n    }\n\n  }\n  \n}\n\nexport class UntilDirective extends HTMLBindingDirective {\n\n  fn:Promise<ViewTemplate> = null;\n  template:ViewTemplate = null;\n\n  constructor( fn:Promise<ViewTemplate> , template:ViewTemplate ) {\n    super( new UntilBindig( (x) => null ) );\n    Object.assign( this , { fn , template } );\n}\n\ncreateBehavior():any {\n\n  let { targetNodeId } = this;\n\n  return {\n    bind : (source:HTMLView) => {\n\n      let target = source.targets[targetNodeId];\n      let loading = this.template.render( source , target instanceof HTMLElement ? target : target.parentElement );\n\n      this.fn\n      .then(( result ) => {\n        loading.dispose()\n        result.render( source , target instanceof HTMLElement ? target : target.parentElement );\n      })\n      .catch(( error ) => {\n        console.error(error);\n        loading.dispose();\n        html`<span>Error: ${error}</span>`.render( source , target instanceof HTMLElement ? target : target.parentElement );\n      })\n\n    },\n    unbind : () => {\n        // Nettoyage si nécessaire\n    }\n};\n\n}\n\nstatic use( fn:Promise<ViewTemplate> , template: ViewTemplate ){\n  return new UntilDirective( fn , template);\n}\n\n}\n\nHTMLDirective.define( UntilDirective );\n\nexport const until = ( fn:Promise<ViewTemplate> , template:ViewTemplate ) => UntilDirective.use( fn , template );","export {\n  // _cssObject,\n  // Properties,\n  // createCSS\n} from './css-object';\n\nexport {\n  createObservableObject,\n} from './observable-object';\n\nexport {\n  ObservableArray,\n} from './observable-array';\n\nexport {\n  ObservableObject,\n  type ObservableProxy,\n  Observable\n} from './observable-object/models';\n\nexport { \n  State,\n  createState\n} from '@lithium-framework/state';\n\nexport { \n  createStorage,\n  // Storage, \n  // StorageKeys, \n  // StorageValues, \n  // StateValidator\n} from '@lithium-framework/context';\n\nexport {\n  // ComponentId,\n  // Segment,\n  // ParentSegementId,\n  // CollectionId,\n  // HUID,\n  // HierarchicalUUIDOptions,\n  uuid\n} from '@lithium-framework/huid';\n\n// export{\n//   Observable,\n//   volatile,\n  // State,\n  // createState,\n  // createStorage,\n  // Storage, \n  // StorageKeys, \n  // StorageValues, \n  // StateValidator,\n  // ComponentId,\n  // Segment,\n  // ParentSegementId,\n  // CollectionId,\n  // HUID,\n  // HierarchicalUUIDOptions,\n  // uuid\n// }","import { ObservableObject } from './models';\n\nexport function createObservableObject< Key extends string , Value extends any >( initialObject:Record< Key , Value > ){\n  return ObservableObject.init< Key , Value >( initialObject );\n}","import { Observable } from \"@microsoft/fast-element\";\n\nexport type ObservableProxy< key extends string , value extends any = any > = Record<string , value> & { \n  subscribe : ObservableObject< key , value >[\"subscribe\"] , \n  unsubscribe : ObservableObject< key , value >[\"unsubscribe\"],\n  keys():string[];\n  values():any[];\n}\n\nexport class ObservableObject< key extends string , value extends any = any > extends Object{\n\n  static init< key extends string , value extends any >( initialObject:Record<key , value> ){\n    let observabe = new ObservableObject< key , value >( initialObject );\n    return observabe.createProxy.bind(observabe)();\n  }\n\n  $data:Record<string , value> = {};\n  private observers: Record<string, Set<(newValue: any, oldValue: any) => void>> = {};\n\n  constructor( initialObject:Record<key , value> ){\n    super();\n    Object.assign( this.$data , initialObject );\n  };\n\n  // Enregistre un observateur pour une propriété spécifique\n  subscribe = (propKey: key, callback: (newValue: any, oldValue: any) => void) => {\n    if (!this.observers[propKey]) {\n      this.observers[propKey] = new Set();\n    }\n    this.observers[propKey].add(callback);\n  }\n\n  // Supprime un observateur pour une propriété spécifique\n  unsubscribe = (propKey: key, callback: (newValue: any, oldValue: any) => void) => {\n    if (this.observers[propKey]) {\n      this.observers[propKey].delete(callback);\n    }\n  }\n\n  // Méthode appelée pour notifier les observateurs d'un changement de valeur\n  private notify(propKey: string, newValue: any, oldValue: any) {\n    if (this.observers[propKey]) {\n      this.observers[propKey].forEach(callback => callback(newValue, oldValue));\n    }\n  }\n\n  set = <T extends value = any>( key:key , value:T ) => {   \n\n    const oldValue = this.$data[`_${key}`];\n\n    this.$data[`_${key}`] = value as any;\n    Observable.defineProperty( this.$data, key);\n    this.notify(key, value, oldValue);\n    return this.$data[key];\n\n  }\n\n  createProxy():ObservableProxy< key , value > {\n\n    return new Proxy( this.$data , {\n      get : ( store , propKey:string ) => {\n\n        let result:any = undefined;\n\n        if( propKey == \"subscribe\" )return this.subscribe;\n        else if( propKey == \"unsubscribe\" )return this.unsubscribe;\n        else if( propKey == \"keys\" )return () => Object.keys( this.$data );\n        else if( propKey == \"values\" )return () => Object.values( this.$data );\n\n        try{\n          result = store[propKey];\n        }\n        catch(error){\n          console.error(error);\n        }\n        finally{\n          return result;\n        }\n\n      },\n      set : ( store , propKey: string, value: any ) => {\n        const oldValue = store[propKey];\n\n        if(store[propKey]){\n          store[propKey] = value;\n        }\n        else {\n          store[ `_${propKey}` ] = value;\n          Observable.defineProperty( store, propKey);\n        }\n\n        this.notify(propKey, value, oldValue);\n\n        return true;\n  \n      }\n    }) as ObservableProxy< key , value >;\n\n  }\n\n}\n\nexport { Observable };","export function ObservableArray(init: Array<any> = []) {\n\n  const observers = new Set<(operation: string, args: any, result: any) => void>();\n\n  const notifyObservers = (operation: string, args: any, result: any) => {\n    observers.forEach(callback => callback(operation, args, result));\n  };\n\n  const arrayMethods = ['push', 'pop', 'splice', 'shift', 'unshift', 'sort', 'reverse'];\n\n  return new Proxy(init, {\n    get(target, property, receiver) {\n      // Si on accède à une méthode de tableau, la redéfinir pour inclure la notification\n      if (arrayMethods.includes(property as string)) {\n        return (...args: any[]) => {\n          const result = Array.prototype[property].apply(target, args);\n          // Notifier les observateurs du changement\n          notifyObservers(property as string, args, result);\n          return result;\n        };\n      }\n\n      return Reflect.get(target, property, receiver);\n    },\n\n    set(target, property, value, receiver) {\n      const oldValue = target[property];\n      const result = Reflect.set(target, property, value, receiver);\n\n      if (oldValue !== value) {\n        notifyObservers('set', { index: property, value }, result);\n      }\n\n      return result;\n    },\n  });\n}\n\nObservableArray.prototype.subscribe = function (callback: (operation: string, args: any, result: any) => void) {\n  this.observers.add(callback);\n};\n\nObservableArray.prototype.unsubscribe = function (callback: (operation: string, args: any, result: any) => void) {\n  this.observers.delete(callback);\n};\n","export { \n  customElement , \n  css,\n  // html,\n  ViewTemplate,\n  HTMLView,\n  volatile,\n} from \"@microsoft/fast-element\";\n\nimport {\n  html as _html,\n  HTMLTemplateTag\n} from \"@microsoft/fast-element\"\n\nexport const html:HTMLTemplateTag = _html;\n\nexport { \n  WebComponent \n} from './model';","import { FASTElement, Observable } from \"@microsoft/fast-element\";\nimport { ObservableObject, ObservableProxy } from '../utils/observable-object/models';\nimport { IWebComponent } from \"./interface\";\nimport { Effects } from \"../models/effects\";\n\nimport { bindEffect } from '../controllers/bindEffect';\nimport { bindState } from '../controllers/bindState';\nimport { bindConsumable } from '../controllers/bindConsumable';\n\n/* The WebComponent class extends FASTElement and provides state management functionality using\nObservableObject. */\nexport class WebComponent extends FASTElement implements IWebComponent{\n\n  /* The line ` = ObservableObject.init( this.constructor[\"states\"] );` is initializing an\n  instance property named `` on the `WebComponent` class. This property is being set to the\n  result of calling the `init` method of the `ObservableObject` class, passing in the initial state\n  values defined in the `states` static property of the `WebComponent` class\n  (`this.constructor[\"states\"]`). */\n  // $states:ObservableProxy< any , any >;\n  // $effects: Effects;\n\n  constructor(){\n    super();\n  }\n\n  get bindState():< States , Value >(key: keyof States, value: Value) => [state: Value, setter: (newValue: Value) => void]{ return bindState.bind(this) }\n  get bindConsumable():< Value >(key: string, value: Value) => void{ return bindConsumable.bind(this) }\n  get bindEffect():( effect_name : string , callback: () => void, dependencies: any[])=> void{ return bindEffect.bind( this ) }\n\n  handleStateChange = ( propertyName, oldValue, newValue ) => {\n    this[propertyName] = newValue;\n    this[\"effects\"].execute( propertyName );\n  }\n\n  connectedCallback( this:IWebComponent ) {\n    this.effects?.execute();\n    super.connectedCallback();\n  }\n\n  static define = FASTElement.define\n  \n}","import { WebComponent } from \"../webComponent\";\nimport { IEffect } from \"../models/effects\";\nimport { ViewExecutionContext } from \"../templateComponent\";\nimport { effect } from \"../decorators\";\n\nexport function bindEffect( this:WebComponent | ViewExecutionContext , effect_name:string , callback : () => void , dependencies : any[] ){\n\n  effect( dependencies )( this , effect_name , callback );\n\n}","import { ObservableObject, ObservableProxy } from \"../utils\";\nimport { ViewExecutionContext } from \"../templateComponent\";\nimport { WebComponent } from \"../webComponent\";\nimport { state } from \"../decorators\";\n\nexport function bindState< States , Value >( this:WebComponent | ViewExecutionContext , key:keyof States , value:Value ):[ state:Value , setter:( newValue:Value ) => void ]{\n\n  function useState( this:ViewExecutionContext , key:keyof States ):[ state:Value , setter:( newValue:Value ) => void ]{\n\n    return [ this[key as string] , ( newValue ) => {\n      this[key as string] = newValue;\n    } ]\n\n  }\n\n  state()( this , key as string , value );\n  return useState.bind( this )( key );\n\n}","import { WebComponent } from \"src/webComponent\";\nimport { state } from \"../decorators\";\nimport { ViewExecutionContext } from \"src/templateComponent\";\nimport { ObservableProxy } from \"../utils\";\n\nexport function bindConsumable<Value = any>( this:WebComponent | ViewExecutionContext , key:string , value:Value ){\n  state()( this , key , value , false );\n}","export * from './model';\nexport * from './types';\nexport * from './interfaces';","import { ObservableObject, ObservableProxy } from '../utils/observable-object/models';\nimport { ViewContext } from './types';\nimport { EffectRegistery, Effects, IEffect } from '../models/effects';\nimport { IWebComponent } from '../webComponent/interface';\n\nimport { bindEffect } from '../controllers/bindEffect';\nimport { bindState } from '../controllers/bindState';\nimport { bindConsumable } from '../controllers/bindConsumable';\n\nexport class ViewExecutionContext< T = any , States extends Record<string , any> = Record<string , any> > extends Object implements IWebComponent{\n\n  states = {};\n  effects?: EffectRegistery = Effects();\n\n  constructor(data?:T ){\n    super();\n\n    Object.assign( this , data );\n\n  }\n\n  get bindState():< Value = never >(key: keyof States, value: Value) => [state: Value, setter: (newValue: Value) => void]{ return bindState.bind(this) }\n  get bindConsumable():< Value >(key: string, value: Value) => void{ return bindConsumable.bind(this) }\n  get bindEffect():( effect_name:string , callback: () => void, dependencies: any[])=> void{ return bindEffect.bind( this ) }\n\n  handleStateChange = ( propertyName, oldValue, newValue ) => {\n\n    console.log( \"handleStateChange\" , { propertyName, oldValue, newValue })\n\n    this[propertyName] = newValue;\n    this[\"effects\"].execute( propertyName );\n  }\n\n  static init< T extends Record<string , any> = {} >( data?:T ):ViewContext<T>{\n      return new ViewExecutionContext( data ) as any as ViewContext<T>;\n  }\n\n}","import { ViewExecutionContext } from \"./model\";\n\nexport type ViewContext< T = Record<string , any> , States = Record<string , any> > = ViewExecutionContext<T , States> & T;","export {};","export * from './render';","import { ViewTemplate } from '@microsoft/fast-element';\nimport { ViewExecutionContext } from '../templateComponent/model';\nimport { WebComponent } from '../webComponent';\n\n// Fonction pour observer les enfants ajoutés\nconst observeChilds = (\n  container: HTMLElement,\n  config: MutationObserverInit,\n  callback: (node: Node) => void\n) => {\n  // Crée un MutationObserver\n  const observer = new MutationObserver((mutationsList, observer) => {\n    // Parcourt toutes les mutations détectées\n    mutationsList.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        // Vérifie si des nœuds ont été ajoutés\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            console.log('Nouvel élément ajouté :', node);\n            callback(node);  // Exécute le callback avec le nœud ajouté\n          }\n        });\n      }\n    });\n  });\n\n  // Démarre l'observation\n  observer.observe(container, config);\n\n  // Retourne l'observer pour pouvoir le déconnecter si besoin\n  return observer;\n};\n\nexport function render< T extends Record<string , any> = {} , Storage extends Record<string , any> = Record<string , any> >(template: ViewTemplate<ViewExecutionContext<any, Record<string, any>>, any>, container: HTMLElement = document.body , data = {} ) {\n\n  let context = ViewExecutionContext.init(data);\n\n  let observer = observeChilds( \n    container, \n    {\n      childList: true,  // Observe les ajouts et suppressions d'enfants\n      subtree: false    // Si true, observe tous les descendants du parent\n    },\n    ( node ) => {\n\n      if( node instanceof WebComponent == false ){\n        if(context[\"effects\"])context[\"effects\"].execute();\n      }\n\n      observer.disconnect();\n    }\n  );\n\n  let element = template.render( context , container);\n\n  return element;\n\n}"],"names":["Effects","DecoratorAttributeConfiguration","attr","state","attrState","options","target","propertyKey","Observable","observable","ViewExecutionContext","WebComponent","ObservableObject","ObservableProxy","_WebComponent","$states","_ViewExecutionContext","propertyName","value","y","privateName","Object","defineProperty","get","states","track","set","newValue","oldValue","notify","handleStateChange","enumerable","configurable","IWebComponent","effect","dependencies","effects","name","callback","EffectRegistery","Map","IEffect","execute","dependency","Record","effects_register","values","forEach","effects_without_depedencies","filter","length","effects_with_depedencies","useEffect","includes","console","log","error","when","repeat","children","elements","slotted","ViewTemplate","HTMLDirective","HTMLBindingDirective","HTMLView","html","Binding","Subscriber","BindingDirective","ExpressionObserver","AsyncAppendBindig","createObserver","subscriber","directive","bind","controller","AsyncAppendDirective","constructor","fn","Promise","T","result","x","assign","createBehavior","targetNodeId","source","targets","then","render","HTMLElement","parentElement","catch","unbind","use","define","asyncAppend","StatelessAttachedAttributeDirective","IElementRef","Node","createRef","RefDirective","lastChild","ref","State","createState","StateBindig","StateDirective","_state","mutator","_callback","view","subscribe","dispose","textContent","useState","Properties","StyleBindig","StyleDirective","css","style","UntilBindig","UntilDirective","template","loading","until","createObservableObject","ObservableArray","createStorage","uuid","initialObject","Key","Value","init","key","unsubscribe","keys","observabe","createProxy","$data","observers","propKey","Set","add","delete","Proxy","store","undefined","Array","operation","args","notifyObservers","arrayMethods","property","receiver","prototype","apply","Reflect","index","customElement","volatile","_html","HTMLTemplateTag","FASTElement","bindEffect","bindState","bindConsumable","States","setter","effect_name","connectedCallback","this","ViewContext","data","observeChilds","container","config","MutationObserverInit","node","observer","MutationObserver","mutationsList","mutation","type","addedNodes","nodeType","ELEMENT_NODE","observe","document","body","context","childList","subtree","disconnect","element"],"version":3,"file":"index.js.map","sourceRoot":"../"}